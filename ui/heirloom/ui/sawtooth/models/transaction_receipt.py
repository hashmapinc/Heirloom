# coding: utf-8

"""
    Sawtooth REST API

    _This HTTP pragmatic REST API is built on top of Sawtooth's existing ZMQ/Protobuf infrastructure, simplifying client interaction with the blockchain by exposing endpoints that use common HTTP/JSON standards._   # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.transaction_receipt_events import TransactionReceiptEvents  # noqa: F401,E501
from swagger_client.models.transaction_receipt_state_changes import TransactionReceiptStateChanges  # noqa: F401,E501


class TransactionReceipt(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'transaction_id': 'str',
        'state_changes': 'list[TransactionReceiptStateChanges]',
        'events': 'list[TransactionReceiptEvents]',
        'data': 'list[str]'
    }

    attribute_map = {
        'transaction_id': 'transaction_id',
        'state_changes': 'state_changes',
        'events': 'events',
        'data': 'data'
    }

    def __init__(self, transaction_id=None, state_changes=None, events=None, data=None):  # noqa: E501
        """TransactionReceipt - a model defined in Swagger"""  # noqa: E501

        self._transaction_id = None
        self._state_changes = None
        self._events = None
        self._data = None
        self.discriminator = None

        if transaction_id is not None:
            self.transaction_id = transaction_id
        if state_changes is not None:
            self.state_changes = state_changes
        if events is not None:
            self.events = events
        if data is not None:
            self.data = data

    @property
    def transaction_id(self):
        """Gets the transaction_id of this TransactionReceipt.  # noqa: E501


        :return: The transaction_id of this TransactionReceipt.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this TransactionReceipt.


        :param transaction_id: The transaction_id of this TransactionReceipt.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def state_changes(self):
        """Gets the state_changes of this TransactionReceipt.  # noqa: E501


        :return: The state_changes of this TransactionReceipt.  # noqa: E501
        :rtype: list[TransactionReceiptStateChanges]
        """
        return self._state_changes

    @state_changes.setter
    def state_changes(self, state_changes):
        """Sets the state_changes of this TransactionReceipt.


        :param state_changes: The state_changes of this TransactionReceipt.  # noqa: E501
        :type: list[TransactionReceiptStateChanges]
        """

        self._state_changes = state_changes

    @property
    def events(self):
        """Gets the events of this TransactionReceipt.  # noqa: E501


        :return: The events of this TransactionReceipt.  # noqa: E501
        :rtype: list[TransactionReceiptEvents]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this TransactionReceipt.


        :param events: The events of this TransactionReceipt.  # noqa: E501
        :type: list[TransactionReceiptEvents]
        """

        self._events = events

    @property
    def data(self):
        """Gets the data of this TransactionReceipt.  # noqa: E501


        :return: The data of this TransactionReceipt.  # noqa: E501
        :rtype: list[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TransactionReceipt.


        :param data: The data of this TransactionReceipt.  # noqa: E501
        :type: list[str]
        """

        self._data = data

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransactionReceipt):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
