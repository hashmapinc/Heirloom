# coding: utf-8

"""
    Sawtooth REST API

    _This HTTP pragmatic REST API is built on top of Sawtooth's existing ZMQ/Protobuf infrastructure, simplifying client interaction with the blockchain by exposing endpoints that use common HTTP/JSON standards._   # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BlockHeader(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_num': 'int',
        'previous_block_id': 'str',
        'signer_public_key': 'str',
        'batch_ids': 'list[str]',
        'consensus': 'str',
        'state_root_hash': 'str'
    }

    attribute_map = {
        'block_num': 'block_num',
        'previous_block_id': 'previous_block_id',
        'signer_public_key': 'signer_public_key',
        'batch_ids': 'batch_ids',
        'consensus': 'consensus',
        'state_root_hash': 'state_root_hash'
    }

    def __init__(self, block_num=None, previous_block_id=None, signer_public_key=None, batch_ids=None, consensus=None, state_root_hash=None):  # noqa: E501
        """BlockHeader - a model defined in Swagger"""  # noqa: E501

        self._block_num = None
        self._previous_block_id = None
        self._signer_public_key = None
        self._batch_ids = None
        self._consensus = None
        self._state_root_hash = None
        self.discriminator = None

        if block_num is not None:
            self.block_num = block_num
        if previous_block_id is not None:
            self.previous_block_id = previous_block_id
        if signer_public_key is not None:
            self.signer_public_key = signer_public_key
        if batch_ids is not None:
            self.batch_ids = batch_ids
        if consensus is not None:
            self.consensus = consensus
        if state_root_hash is not None:
            self.state_root_hash = state_root_hash

    @property
    def block_num(self):
        """Gets the block_num of this BlockHeader.  # noqa: E501


        :return: The block_num of this BlockHeader.  # noqa: E501
        :rtype: int
        """
        return self._block_num

    @block_num.setter
    def block_num(self, block_num):
        """Sets the block_num of this BlockHeader.


        :param block_num: The block_num of this BlockHeader.  # noqa: E501
        :type: int
        """

        self._block_num = block_num

    @property
    def previous_block_id(self):
        """Gets the previous_block_id of this BlockHeader.  # noqa: E501


        :return: The previous_block_id of this BlockHeader.  # noqa: E501
        :rtype: str
        """
        return self._previous_block_id

    @previous_block_id.setter
    def previous_block_id(self, previous_block_id):
        """Sets the previous_block_id of this BlockHeader.


        :param previous_block_id: The previous_block_id of this BlockHeader.  # noqa: E501
        :type: str
        """

        self._previous_block_id = previous_block_id

    @property
    def signer_public_key(self):
        """Gets the signer_public_key of this BlockHeader.  # noqa: E501


        :return: The signer_public_key of this BlockHeader.  # noqa: E501
        :rtype: str
        """
        return self._signer_public_key

    @signer_public_key.setter
    def signer_public_key(self, signer_public_key):
        """Sets the signer_public_key of this BlockHeader.


        :param signer_public_key: The signer_public_key of this BlockHeader.  # noqa: E501
        :type: str
        """

        self._signer_public_key = signer_public_key

    @property
    def batch_ids(self):
        """Gets the batch_ids of this BlockHeader.  # noqa: E501


        :return: The batch_ids of this BlockHeader.  # noqa: E501
        :rtype: list[str]
        """
        return self._batch_ids

    @batch_ids.setter
    def batch_ids(self, batch_ids):
        """Sets the batch_ids of this BlockHeader.


        :param batch_ids: The batch_ids of this BlockHeader.  # noqa: E501
        :type: list[str]
        """

        self._batch_ids = batch_ids

    @property
    def consensus(self):
        """Gets the consensus of this BlockHeader.  # noqa: E501


        :return: The consensus of this BlockHeader.  # noqa: E501
        :rtype: str
        """
        return self._consensus

    @consensus.setter
    def consensus(self, consensus):
        """Sets the consensus of this BlockHeader.


        :param consensus: The consensus of this BlockHeader.  # noqa: E501
        :type: str
        """

        self._consensus = consensus

    @property
    def state_root_hash(self):
        """Gets the state_root_hash of this BlockHeader.  # noqa: E501


        :return: The state_root_hash of this BlockHeader.  # noqa: E501
        :rtype: str
        """
        return self._state_root_hash

    @state_root_hash.setter
    def state_root_hash(self, state_root_hash):
        """Sets the state_root_hash of this BlockHeader.


        :param state_root_hash: The state_root_hash of this BlockHeader.  # noqa: E501
        :type: str
        """

        self._state_root_hash = state_root_hash

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlockHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
