# coding: utf-8

"""
    Sawtooth REST API

    _This HTTP pragmatic REST API is built on top of Sawtooth's existing ZMQ/Protobuf infrastructure, simplifying client interaction with the blockchain by exposing endpoints that use common HTTP/JSON standards._   # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.batch_header import BatchHeader  # noqa: F401,E501
from swagger_client.models.transaction import Transaction  # noqa: F401,E501


class Batch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'header': 'BatchHeader',
        'header_signature': 'str',
        'transactions': 'list[Transaction]'
    }

    attribute_map = {
        'header': 'header',
        'header_signature': 'header_signature',
        'transactions': 'transactions'
    }

    def __init__(self, header=None, header_signature=None, transactions=None):  # noqa: E501
        """Batch - a model defined in Swagger"""  # noqa: E501

        self._header = None
        self._header_signature = None
        self._transactions = None
        self.discriminator = None

        if header is not None:
            self.header = header
        if header_signature is not None:
            self.header_signature = header_signature
        if transactions is not None:
            self.transactions = transactions

    @property
    def header(self):
        """Gets the header of this Batch.  # noqa: E501


        :return: The header of this Batch.  # noqa: E501
        :rtype: BatchHeader
        """
        return self._header

    @header.setter
    def header(self, header):
        """Sets the header of this Batch.


        :param header: The header of this Batch.  # noqa: E501
        :type: BatchHeader
        """

        self._header = header

    @property
    def header_signature(self):
        """Gets the header_signature of this Batch.  # noqa: E501


        :return: The header_signature of this Batch.  # noqa: E501
        :rtype: str
        """
        return self._header_signature

    @header_signature.setter
    def header_signature(self, header_signature):
        """Sets the header_signature of this Batch.


        :param header_signature: The header_signature of this Batch.  # noqa: E501
        :type: str
        """

        self._header_signature = header_signature

    @property
    def transactions(self):
        """Gets the transactions of this Batch.  # noqa: E501


        :return: The transactions of this Batch.  # noqa: E501
        :rtype: list[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions):
        """Sets the transactions of this Batch.


        :param transactions: The transactions of this Batch.  # noqa: E501
        :type: list[Transaction]
        """

        self._transactions = transactions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Batch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
