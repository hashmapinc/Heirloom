# coding: utf-8

"""
    Sawtooth REST API

    _This HTTP pragmatic REST API is built on top of Sawtooth's existing ZMQ/Protobuf infrastructure, simplifying client interaction with the blockchain by exposing endpoints that use common HTTP/JSON standards._   # noqa: E501

    OpenAPI spec version: 0.8.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.head import Head  # noqa: F401,E501
from swagger_client.models.link import Link  # noqa: F401,E501
from swagger_client.models.paging import Paging  # noqa: F401,E501


class InlineResponse2006(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data': 'list[ERRORUNKNOWN]',
        'head': 'Head',
        'link': 'Link',
        'paging': 'Paging'
    }

    attribute_map = {
        'data': 'data',
        'head': 'head',
        'link': 'link',
        'paging': 'paging'
    }

    def __init__(self, data=None, head=None, link=None, paging=None):  # noqa: E501
        """InlineResponse2006 - a model defined in Swagger"""  # noqa: E501

        self._data = None
        self._head = None
        self._link = None
        self._paging = None
        self.discriminator = None

        if data is not None:
            self.data = data
        if head is not None:
            self.head = head
        if link is not None:
            self.link = link
        if paging is not None:
            self.paging = paging

    @property
    def data(self):
        """Gets the data of this InlineResponse2006.  # noqa: E501


        :return: The data of this InlineResponse2006.  # noqa: E501
        :rtype: list[ERRORUNKNOWN]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this InlineResponse2006.


        :param data: The data of this InlineResponse2006.  # noqa: E501
        :type: list[ERRORUNKNOWN]
        """

        self._data = data

    @property
    def head(self):
        """Gets the head of this InlineResponse2006.  # noqa: E501


        :return: The head of this InlineResponse2006.  # noqa: E501
        :rtype: Head
        """
        return self._head

    @head.setter
    def head(self, head):
        """Sets the head of this InlineResponse2006.


        :param head: The head of this InlineResponse2006.  # noqa: E501
        :type: Head
        """

        self._head = head

    @property
    def link(self):
        """Gets the link of this InlineResponse2006.  # noqa: E501


        :return: The link of this InlineResponse2006.  # noqa: E501
        :rtype: Link
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this InlineResponse2006.


        :param link: The link of this InlineResponse2006.  # noqa: E501
        :type: Link
        """

        self._link = link

    @property
    def paging(self):
        """Gets the paging of this InlineResponse2006.  # noqa: E501


        :return: The paging of this InlineResponse2006.  # noqa: E501
        :rtype: Paging
        """
        return self._paging

    @paging.setter
    def paging(self, paging):
        """Sets the paging of this InlineResponse2006.


        :param paging: The paging of this InlineResponse2006.  # noqa: E501
        :type: Paging
        """

        self._paging = paging

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
